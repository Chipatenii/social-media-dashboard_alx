{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/posts/';\n\n// Get all posts from the user's feed (posts of people they follow)\nconst getFeed = async () => {\n  const res = await axios.get(API_URL + 'feed', {\n    headers: {\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\n    }\n  });\n  return res.data;\n};\n\n// Create a new post\nconst createPost = async text => {\n  const res = await axios.post(API_URL, {\n    text\n  }, {\n    headers: {\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\n    }\n  });\n  return res.data;\n};\n\n// Delete a post\nconst deletePost = async postId => {\n  const res = await axios.delete(API_URL + postId, {\n    headers: {\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\n    }\n  });\n  return res.data;\n};\n\n// Like a post\nconst likePost = async postId => {\n  const res = await axios.post(API_URL + postId + '/like', {}, {\n    headers: {\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\n    }\n  });\n  return res.data;\n};\n\n// Comment on a post\nconst commentOnPost = async (postId, commentText) => {\n  const res = await axios.post(API_URL + postId + '/comment', {\n    text: commentText\n  }, {\n    headers: {\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\n    }\n  });\n  return res.data;\n};\nconst postService = {\n  getFeed,\n  createPost,\n  deletePost,\n  likePost,\n  commentOnPost\n};\nexport default postService;","map":{"version":3,"names":["axios","API_URL","getFeed","res","get","headers","Authorization","JSON","parse","localStorage","getItem","token","data","createPost","text","post","deletePost","postId","delete","likePost","commentOnPost","commentText","postService"],"sources":["C:/Users/Innocent Manda/Desktop/social-media-dashboard_alx/frontend/src/services/postService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/posts/';\r\n\r\n// Get all posts from the user's feed (posts of people they follow)\r\nconst getFeed = async () => {\r\n  const res = await axios.get(API_URL + 'feed', {\r\n    headers: {\r\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\r\n    }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// Create a new post\r\nconst createPost = async (text) => {\r\n  const res = await axios.post(API_URL, { text }, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\r\n    }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// Delete a post\r\nconst deletePost = async (postId) => {\r\n  const res = await axios.delete(API_URL + postId, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\r\n    }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// Like a post\r\nconst likePost = async (postId) => {\r\n  const res = await axios.post(API_URL + postId + '/like', {}, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\r\n    }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// Comment on a post\r\nconst commentOnPost = async (postId, commentText) => {\r\n  const res = await axios.post(API_URL + postId + '/comment', { text: commentText }, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user')).token\r\n    }\r\n  });\r\n  return res.data;\r\n};\r\n\r\nconst postService = {\r\n  getFeed,\r\n  createPost,\r\n  deletePost,\r\n  likePost,\r\n  commentOnPost\r\n};\r\n\r\nexport default postService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC;;AAElD;AACA,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;EAC1B,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,GAAG,MAAM,EAAE;IAC5CI,OAAO,EAAE;MACPC,aAAa,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACC;IACtE;EACF,CAAC,CAAC;EACF,OAAOR,GAAG,CAACS,IAAI;AACjB,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACjC,MAAMX,GAAG,GAAG,MAAMH,KAAK,CAACe,IAAI,CAACd,OAAO,EAAE;IAAEa;EAAK,CAAC,EAAE;IAC9CT,OAAO,EAAE;MACPC,aAAa,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACC;IACtE;EACF,CAAC,CAAC;EACF,OAAOR,GAAG,CAACS,IAAI;AACjB,CAAC;;AAED;AACA,MAAMI,UAAU,GAAG,MAAOC,MAAM,IAAK;EACnC,MAAMd,GAAG,GAAG,MAAMH,KAAK,CAACkB,MAAM,CAACjB,OAAO,GAAGgB,MAAM,EAAE;IAC/CZ,OAAO,EAAE;MACPC,aAAa,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACC;IACtE;EACF,CAAC,CAAC;EACF,OAAOR,GAAG,CAACS,IAAI;AACjB,CAAC;;AAED;AACA,MAAMO,QAAQ,GAAG,MAAOF,MAAM,IAAK;EACjC,MAAMd,GAAG,GAAG,MAAMH,KAAK,CAACe,IAAI,CAACd,OAAO,GAAGgB,MAAM,GAAG,OAAO,EAAE,CAAC,CAAC,EAAE;IAC3DZ,OAAO,EAAE;MACPC,aAAa,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACC;IACtE;EACF,CAAC,CAAC;EACF,OAAOR,GAAG,CAACS,IAAI;AACjB,CAAC;;AAED;AACA,MAAMQ,aAAa,GAAG,MAAAA,CAAOH,MAAM,EAAEI,WAAW,KAAK;EACnD,MAAMlB,GAAG,GAAG,MAAMH,KAAK,CAACe,IAAI,CAACd,OAAO,GAAGgB,MAAM,GAAG,UAAU,EAAE;IAAEH,IAAI,EAAEO;EAAY,CAAC,EAAE;IACjFhB,OAAO,EAAE;MACPC,aAAa,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACC;IACtE;EACF,CAAC,CAAC;EACF,OAAOR,GAAG,CAACS,IAAI;AACjB,CAAC;AAED,MAAMU,WAAW,GAAG;EAClBpB,OAAO;EACPW,UAAU;EACVG,UAAU;EACVG,QAAQ;EACRC;AACF,CAAC;AAED,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}